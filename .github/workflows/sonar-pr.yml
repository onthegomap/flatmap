# Pull requests don't have access to SONAR_TOKEN secret, so instead run sonarqube in a local docker
# container

name: Analyze PR

env:
  SONARQUBE_LOGIN: admin
  SONARQUBE_PASSWORD: admin

on:
  pull_request:
    branches: [ main ]

jobs:
  sonar:
    name: Analyze with Sonar
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      sonar:
        image: sonarqube:latest
        ports:
          - 9000:9000
    steps:
      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Analyze with SonarCloud
        run: |
          mvn -Dspotless.apply.skip \
              -Dsonar.host.url=http://localhost:9000 \
              -Dsonar.login=admin -Dsonar.password=admin \
              -Pcoverage -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        env:
          # Needed to get some information about the pull request, if any
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch issues from API...
        run: |
          sleep 10
          curl -v -o issues.json http://localhost:9000/api/issues/search?pullRequest=${{ github.event.number }}&s=FILE_LINE&resolved=false&sinceLeakPeriod=true&ps=100&facets=severities%2Ctypes&componentKeys=onthegomap_planetiler&organization=onthegomap&additionalFields=_all
          cat issues.json
      - name: Upload annotations on PRs
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const pr = context.payload.pull_request.number;
            const response = require("./issues.json");
            console.log("Got " + JSON.stringify(response));
            response.issues.forEach(issue => {
              try {
                if (issue.severity === 'INFO') return;
                const textRange = issue.textRange;
                const rule = encodeURIComponent(issue.rule);
                const message = [
                  issue.message,
                  '',
                  `rule: ${issue.rule} (https://sonarcloud.io/organizations/onthegomap/rules?open=${rule}&rule_key=${rule})`,
                  // `issue url: https://sonarcloud.io/project/issues?pullRequest=${pr}&open=${encodeURIComponent(issue.key)}&id=onthegomap_planetiler`
                ].join('\n');
                const args = {
                  title: `${issue.severity} ${issue.type}`,
                  file: issue.component.replace(/^[^:]*:/, ''),
                  startLine: textRange.startLine,
                  endLine: textRange.endLine,
                  startColumn: textRange.startOffset,
                  endColumn: textRange.endOffset
                };
                core.warning(message, args);
                console.log(args);
              } catch (e) {
                core.error(`Unable to parse sonar issue: ${JSON.stringify(issue)}`);
              }
            });
