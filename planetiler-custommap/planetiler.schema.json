{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/onthegomap/planetiler/main/planetiler-custommap/planetiler.schema.json",
  "title": "Planetiler",
  "description": "Planetiler schema definition",
  "type": "object",
  "properties": {
    "schema_name": {
      "description": "A descriptive name for the schema",
      "type": "string"
    },
    "schema_description": {
      "description": "A longer description of the schema",
      "type": "string"
    },
    "attribution": {
      "description": "An attribution statement, which may include HTML such as links",
      "type": "string"
    },
    "sources": {
      "description": "A list of sources from which features should be extracted, specified as a list of names",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "osm",
              "shapefile"
            ]
          },
          "url": {
            "description": "URL to download this file from if not present at `local_path`",
            "type": "string"
          },
          "local_path": {
            "description": "Local path to the file to use, inferred from `url` if missing"
          }
        },
        "oneOf": [
          {
            "required": [
              "url"
            ]
          },
          {
            "required": [
              "local_path"
            ]
          }
        ]
      }
    },
    "tag_mappings": {
      "description": "Specifies that certain tag key should have their values treated as being a certain data type",
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/$defs/datatype"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/$defs/datatype"
              },
              "output": {
                "description": "The name of the typed key that will be presented to the attribute logic",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "layers": {
      "description": "A list of vector tile layers and their definitions",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of this layer",
            "type": "string"
          },
          "features": {
            "description": "A list of features contained in this layer",
            "type": "array",
            "items": {
              "$ref": "#/$defs/feature"
            }
          }
        }
      }
    }
  },
  "$defs": {
    "datatype": {
      "type": "string",
      "enum": [
        "boolean",
        "string",
        "direction",
        "long",
        "integer",
        "double"
      ]
    },
    "feature": {
      "type": "object",
      "required": [
        "geometry"
      ],
      "properties": {
        "geometry": {
          "description": "Include objects of a certain geometry type",
          "type": "string",
          "enum": [
            "point",
            "line",
            "polygon",
            "polygon_centroid",
            "polygon_centroid_if_convex",
            "polygon_point_on_surface"
          ]
        },
        "source": {
          "description": "A source or list of sources from which features should be extracted",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "min_tile_cover_size": {
          "description": "include objects of a certain geometry size, where 1.0 means \"is the same size as a tile at this zoom\"",
          "type": "number",
          "minimum": 0,
          "maximum": 1
        },
        "include_when": {
          "description": "A tag specification which determines which features to include. If unspecified, all features from the specified sources are included",
          "$ref": "#/$defs/boolean_expression"
        },
        "exclude_when": {
          "description": "A tag specification which determines which features to exclude. This rule is applied after `includeWhen`. If unspecified, no exclusion filter is applied.",
          "$ref": "#/$defs/boolean_expression"
        },
        "min_zoom": {
          "description": "Minimum zoom to show the feature that matches the filter specifications.",
          "$ref": "#/$defs/expression"
        },
        "attributes": {
          "description": "Specifies the attributes that should be rendered into the tiles for this feature, and how they are constructed",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "description": "Name of this attribute in the tile",
                "type": "string"
              },
              "type": {
                "description": "Type of the attribute to map to",
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "match_key",
                      "match_value"
                    ]
                  },
                  {
                    "$ref": "#/$defs/datatype"
                  }
                ]
              },
              "value": {
                "$ref": "#/$defs/expression"
              },
              "tag_value": {
                "description": "Value of the attribute in the tile, as copied from the value of the specified tag key. If neither constantValue nor tagValue are specified, the default behavior is to set the tag value equal to the input value (pass-through)"
              },
              "include_when": {
                "description": "A filter specification which determines whether to include this attribute. If unspecified, the attribute will be included unless excluded by `excludeWhen`",
                "$ref": "#/$defs/boolean_expression"
              },
              "exclude_when": {
                "description": "A filter specification which determines whether to exclude this attribute. This rule is applied after `includeWhen`. If unspecified, no exclusion filter is applied.",
                "$ref": "#/$defs/boolean_expression"
              },
              "min_zoom": {
                "description": "The minimum zoom at which to render this attribute",
                "$ref": "#/$defs/zoom_level"
              },
              "min_zoom_by_value": {
                "description": "Minimum zoom to render this attribute depending on the value. Contains a map of `value: zoom` entries that indicate the minimum zoom for each possible value",
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/$defs/zoom_level"
                }
              }
            }
          }
        }
      }
    },
    "zoom_level": {
      "type": "integer",
      "minimum": 0,
      "maximum": 15
    },
    "boolean_expression": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/single_boolean_expression"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/$defs/single_boolean_expression"
          }
        }
      ]
    },
    "single_boolean_expression": {
      "type": "object",
      "properties": {
        "__all__": {
          "$ref": "#/$defs/boolean_expression"
        },
        "__any__": {
          "$ref": "#/$defs/boolean_expression"
        },
        "__not__": {
          "$ref": "#/$defs/boolean_expression"
        }
      },
      "additionalProperties": {
        "anyOf": [
          {
            "description": "Matches any value for this key",
            "const": "__any__"
          },
          {
            "description": "Matches when this key is missing or empty",
            "const": ""
          },
          {
            "type": "array",
            "description": "A list of possible values for the key",
            "items": {
              "description": "One of the possible values for the key"
            }
          },
          {
            "description": "A single value for the key"
          }
        ]
      }
    },
    "expression": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "properties": {
            "default_value": {
              "$ref": "#/$defs/expression"
            },
            "overrides": {
              "$ref": "#/$defs/multiexpression"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "match": {
              "$ref": "#/$defs/multiexpression"
            }
          }
        }
      ]
    },
    "multiexpression": {
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/$defs/boolean_expression"
              },
              {
                "const": "otherwise"
              }
            ]
          }
        },
        {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "$ref": "#/$defs/expression"
              },
              "if": {
                "$ref": "#/$defs/boolean_expression"
              },
              "else": {
                "$ref": "#/$defs/expression"
              }
            }
          }
        }
      ]
    }
  }
}
